using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Lesson71 : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        #region 知识点一 让物体接收阴影的思路
        //上节课我们已经能够让物体投射阴影了
        //所谓的投射阴影，其实就是让物体参与到光源的阴影映射纹理计算中
        //最终才能影响其他物体在接收阴影时的采样结果

        //由此可见让物体接收阴影的主要思路
        //其实就是要从阴影隐射纹理中进行采样
        //然后将采样结果用于最终的颜色计算中

        //总体的流程就是:
        //1.在顶点着色器中进行顶点坐标转换（将顶点坐标 转换为 阴影映射纹理坐标）
        //2.在片元着色器中使用阴影映射纹理坐标在阴影映射纹理中进行采样
        //  通过得到的深度值判断片元（像素）是否在阴影中，以计算出阴影衰减值
        //3.将采样结果参与到最终的颜色计算中
        #endregion

        #region 知识点二 实现物体接收阴影效果
        //1.创建一个新的Shader，复制Lesson64_ForwardLighting中的内容到新Shader中
        //  在此基础上实现接受阴影的效果

        //2.接受阴影的三剑客（三个宏）
        //  我们这节课只修改Bass Pass中的代码
        //  来感受下接受阴影的流程

        //  首先我们需要在Bass Pass当中引用包含内置文件
        //  #include "AutoLight.cginc"
        //  该内置文件中，有用于计算阴影时需要使用的三剑客

        //  2-1.SHADOW_COORDS      (阴影坐标宏)
        //      该宏在v2f结构体（顶点着色器返回值）中使用
        //      本质上就是声明了一个用于对阴影纹理进行采样的坐标
        //      在内部实际上就是声明了一个名为_ShadowCoord的阴影纹理坐标变量
        //      需要注意的是：
        //      在使用时 SHADOW_COORDS(2) 传入参数2
        //      表示需要时下一个可用的插值寄存器的索引值   

        //  2-2.TRANSFER_SHADOW    (转移阴影宏)
        //      该宏在顶点着色器函数中调用，传入对应的v2f结构体对象
        //      该宏会在内部自己判断应该使用哪种阴影映射技术（SM、SSSM）
        //      最终的目的就是将顶点进行坐标转换并存储到_ShadowCoord阴影纹理坐标变量中
        //      需要注意的是：
        //      1.该宏会在内部使用顶点着色器中传入的结构体
        //        该结构体中顶点的命名必须是vertex
        //      2.该宏会在内部使用顶点着色器的返回结构体
        //        其中的顶点位置命名必须是pos

        //  2-3.SHADOW_ATTENUATION (阴影衰减宏)
        //      该宏在片元着色器中调用，传入对应的v2f结构体对象
        //      该宏会在内部利用v2f中的 阴影纹理坐标变量(ShadowCoord)对相关纹理进行采样
        //      将采样得到的深度值进行比较，以计算出一个fixed3的阴影衰减值
        //      我们只需要使用它返回的结果和 (漫反射+高光反射) 的结果相乘即可

        //3.注意
        //  我们目前处理的方式只是让大家大致了解接受阴影的流程
        //  我们还没有对 Additional Pass 附加渲染通道进行处理
        //  我们将在下节课中统一处理光照衰减和阴影 得到最终效果
        #endregion
    }

    // Update is called once per frame
    void Update()
    {

    }
}
